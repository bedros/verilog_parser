start: description*

description: module_declaration
module_declaration: ("module"|"macromodule") module_identifier param_list? port_list? ";" module_item* "endmodule"

module_identifier: identifier
param_list: "#" "(" [ports] ")"

port_list: "(" [ports] ")"
ports: identifier ("," identifier)*

//module item
module_item: module_or_generate_item

?module_or_generate_item: continuous_assign
    | always_construct

//continuous assignment
continuous_assign: "assign" net_assignment ("," net_assignment)* ";"
net_assignment: net_lvalue "=" expression
net_lvalue: identifier

//always construct
always_construct: "always" [procedural_timing_control_statement] statement

//statement
?statement: blocking_assignment ";"
    | nonblocking_assignment ";"

blocking_assignment: variable_lvalue "=" [delay_or_event_control] expression
nonblocking_assignment: variable_lvalue "<=" [delay_or_event_control] expression
variable_lvalue: identifier

//delay or event control
?procedural_timing_control_statement: delay_or_event_control
?delay_or_event_control: delay_control
    | event_control

delay_control: "#" NUMBER
event_control: "@" (STAR | identifier)

//expression
?expression: or_expr ["?" or_expr ":" or_expr]
?or_expr: and_expr (_or_op and_expr)*
?and_expr: bitwise_or_expr (_and_op bitwise_or_expr)*
?bitwise_or_expr: bitwise_xor_expr (_bitwise_or_op bitwise_xor_expr)*
?bitwise_xor_expr: bitwise_and_expr (_bitwise_xor_op bitwise_and_expr)*
?bitwise_and_expr: eq_expr (_bitwise_and_op eq_expr)*
?eq_expr: comp_expr (_eq_op comp_expr)*
?comp_expr: shift_expr (_comp_op shift_expr)*
?shift_expr: arith_expr (_shift_op arith_expr)*
?arith_expr: term (_add_op term)*
?term: power (_mul_op power)*
?power: factor [_power_op factor]
?factor: [_factor_op] atom_expr

!_or_op: "||"
!_and_op: "&&"
!_bitwise_or_op: "|"|"~|"
!_bitwise_xor_op: "^"|"^~"|"~^"
!_bitwise_and_op: "&"|"~&"
!_eq_op: "=="|"!="|"==="|"!=="
!_comp_op: "<"|">"|">="|"<="
!_shift_op: "<<"|"<<<"|">>"|">>>"
!_add_op: "+"|"-"
!_mul_op: "*"|"/"|"%"
!_power_op: "**"
!_factor_op: "+"|"-"|"~"|"!"

?atom_expr: atom

?atom: identifier
    | NUMBER
    | "(" expression ")"

// Terminals
identifier: CNAME
    | ESC_NAME
ESC_NAME: "\\"(ANY_CHAR+)

NUMBER: ("0".."9")+
ANY_CHAR: /[^ \t\r\n\f]/
%import common.CNAME

STAR: "*"

// Ignorable
COMMENT: "//" /[^\n]*/
%ignore COMMENT

BLOCK_COMMENT: "/*" /(.|\n)*?/ "*/"
%ignore BLOCK_COMMENT

%import common.WS_INLINE
%ignore WS_INLINE
%import common.NEWLINE
%ignore NEWLINE